import React from 'react';
import { Draggable } from 'react-beautiful-dnd';
import { useSetRecoilState } from 'recoil';
import styled from 'styled-components';
import { toDoState } from '../@core/recoil/atoms';

interface DragabbleCardProps {
  id: number;
  text: string;
  index: number;
}

const DraggableCard = ({ id, text, index }: DragabbleCardProps) => {
  const setToDos = useSetRecoilState(toDoState);
  const onDelete = (event: React.MouseEvent<HTMLButtonElement>) => {
    // 부모가 내려주는 게 낫지 않을까..?
    onDeleteCard('To do', 0);
  };

  const onDeleteCard = (boardId: any, cardIndex: any) => {
    setToDos((allBoards) => {
      const targetBoard = [...allBoards[boardId]];
      targetBoard.splice(cardIndex, 0);
      return {
        ...allBoards,
        targetBoard //아니야아앜ㅋ 그냥 보드리스트에 타겟보드를 추가하네;;
      };
      // return allBoards;
    });
  };

  return (
    <Draggable draggableId={`${id}`} index={index}>
      {(provided, snapshot) => (
        <Card
          ref={provided.innerRef}
          {...provided.draggableProps}
          {...provided.dragHandleProps}
          isDragging={snapshot.isDragging}
        >
          {text}
          <DeleteButton type="button" onClick={onDelete}>
            ❌
          </DeleteButton>
        </Card>
      )}
    </Draggable>
  );
};

export default React.memo(DraggableCard);

const Card = styled.li<{ isDragging: boolean }>`
  display: flex;
  align-items: center;
  gap: 4px;
  border-radius: 0.5rem;
  margin-bottom: 0.5rem;
  padding: 1rem;
  background-color: ${(props) => (props.isDragging ? '#999' : props.theme.cardColor)};
  color: ${(props) => (props.isDragging ? '#fff' : '#222')};
`;

const DeleteButton = styled.button`
  border: 0;
  background: none;
  padding: 0 0.4rem;
  border-radius: 0.4rem;
  font-size: 1.1rem;
  cursor: pointer;

  &:hover {
    background-color: #eaeaea;
  }
`;
